{"Protocols/SingleSnapshotContainer.html#/load(_:)":{"name":"load(_:)","abstract":"<p>Asynchronously loads a snapshot from the container. A <code>nil</code> is returned if no previous state was stored.</p>","parent_name":"SingleSnapshotContainer"},"Protocols/SingleSnapshotContainer.html#/loadSync(_:)":{"name":"loadSync(_:)","abstract":"<p>The synchronous version of <code>load()</code>.","parent_name":"SingleSnapshotContainer"},"Protocols/SingleSnapshotContainer.html#/save(_:)":{"name":"save(_:)","abstract":"<p>Schedules to save the given snapshot replacing anything previously saved.","parent_name":"SingleSnapshotContainer"},"Protocols/SingleSnapshotContainer.html#/clean()":{"name":"clean()","abstract":"<p>Clean this container (e.g. remove contents), but keep it alive for later use. If you don&rsquo;t need to keep the container","parent_name":"SingleSnapshotContainer"},"Protocols/SingleSnapshotContainer.html#/cleanSync()":{"name":"cleanSync()","abstract":"<p>The synchronous version of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/SingleSnapshotContainer.html#/clean()\">clean()</a></code>.</p>","parent_name":"SingleSnapshotContainer"},"Protocols/SnapshotStorage.html#/containerForKey(_:)":{"name":"containerForKey(_:)","abstract":"<p>Returns a container prepared to load/store snapshots of a single object.</p>","parent_name":"SnapshotStorage"},"Protocols/SnapshotStorage.html#/removeContainerForKey(_:)":{"name":"removeContainerForKey(_:)","abstract":"<p>Remove a container (do clean up) for a given key, synchronously.</p>","parent_name":"SnapshotStorage"},"Protocols/SnapshotStorage.html":{"name":"SnapshotStorage","abstract":"<p>Support for simple snapshot-based persistence.</p>"},"Protocols/SingleSnapshotContainer.html":{"name":"SingleSnapshotContainer","abstract":"<p>Something that can hold a single &ldquo;snapshot&rdquo; of an object. This is to be passed to models that need to be"},"Enums/InvalidationPolicy.html#/never":{"name":"never","abstract":"<p>Never invalidate the storage.</p>","parent_name":"InvalidationPolicy"},"Enums/InvalidationPolicy.html#/hourly":{"name":"hourly","abstract":"<p>Invalidate the storage every hour.</p>","parent_name":"InvalidationPolicy"},"Enums/InvalidationPolicy.html#/daily":{"name":"daily","abstract":"<p>Invalidate the storage every day.</p>","parent_name":"InvalidationPolicy"},"Enums/InvalidationPolicy.html#/custom(_:)":{"name":"custom(_:)","abstract":"<p>Custom invalidation, number of seconds.</p>","parent_name":"InvalidationPolicy"},"Enums/InvalidationPolicy.html":{"name":"InvalidationPolicy"},"Classes/StoredLoadable.html#/init(storage:policy:populateDirectly:queue:)":{"name":"init(storage:policy:populateDirectly:queue:)","abstract":"<p>Initialize a new <code>StoredLoadable</code>, the <code>storage</code> container should be provided by the owner of this class.</p>","parent_name":"StoredLoadable"},"Classes/StoredLoadable.html#/sync()":{"name":"sync()","abstract":"<p>Overriding the <code>sync</code> method in <code>MMMLoadable</code>, using the same base implementation, except for checking","parent_name":"StoredLoadable"},"Classes/StoredLoadable.html#/setDidSyncSuccessfully(content:)":{"name":"setDidSyncSuccessfully(content:)","parent_name":"StoredLoadable"},"Classes/StoredLoadable.html#/needsSync()":{"name":"needsSync()","abstract":"<p>If this loadable needs syncing (e.g. when calling <code>syncIfNeeded()</code>), this method now also checks if the cache","parent_name":"StoredLoadable"},"Classes/FileBasedSnapshotStorage.html#/init(libraryDirectory:queue:)":{"name":"init(libraryDirectory:queue:)","abstract":"<p>Convenience initializer using a directory with the given name under <code>&lt;sandbox&gt;/Library</code>.</p>","parent_name":"FileBasedSnapshotStorage"},"Classes/FileBasedSnapshotStorage.html#/init(cachesDirectory:queue:)":{"name":"init(cachesDirectory:queue:)","abstract":"<p>Convenience initializer using a directory with the given name under <code>&lt;sandbox&gt;/Library/Caches</code> or","parent_name":"FileBasedSnapshotStorage"},"Classes/FileBasedSnapshotStorage.html#/init(rootDirectory:queue:)":{"name":"init(rootDirectory:queue:)","parent_name":"FileBasedSnapshotStorage"},"Classes/FileBasedSnapshotStorage.html#/containerForKey(_:)":{"name":"containerForKey(_:)","parent_name":"FileBasedSnapshotStorage"},"Classes/FileBasedSnapshotStorage.html#/removeContainerForKey(_:)":{"name":"removeContainerForKey(_:)","parent_name":"FileBasedSnapshotStorage"},"Classes/MockSingleSnapshotContainer.html#/key":{"name":"key","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/init(key:)":{"name":"init(key:)","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/snapshot":{"name":"snapshot","abstract":"<p>The last saved snapshot, if any.","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/loadSync(_:)":{"name":"loadSync(_:)","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/load(_:)":{"name":"load(_:)","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/save(_:)":{"name":"save(_:)","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/clean()":{"name":"clean()","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSingleSnapshotContainer.html#/cleanSync()":{"name":"cleanSync()","parent_name":"MockSingleSnapshotContainer"},"Classes/MockSnapshotStorage.html#/containerForKey(_:)":{"name":"containerForKey(_:)","parent_name":"MockSnapshotStorage"},"Classes/MockSnapshotStorage.html#/removeContainerForKey(_:)":{"name":"removeContainerForKey(_:)","parent_name":"MockSnapshotStorage"},"Classes/MockSnapshotStorage.html":{"name":"MockSnapshotStorage"},"Classes/MockSingleSnapshotContainer.html":{"name":"MockSingleSnapshotContainer","abstract":"<p>To mock a snapshot container by storing the last saved value in memory.</p>"},"Classes/FileBasedSnapshotStorage.html":{"name":"FileBasedSnapshotStorage","abstract":"<p>Straightforward file-based SnapshotStorage implementation where each snapshot is stored in its own file.</p>"},"Classes/StoredLoadable.html":{"name":"StoredLoadable","abstract":"<p>A loadable that stores the <code>Content</code> entity, and checks against the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/InvalidationPolicy.html\">InvalidationPolicy</a></code>.</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}